// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2023 18:15:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    autito_principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module autito_principal_vlg_sample_tst(
	CLK,
	RESET,
	SENSOR,
	STOP,
	sampler_tx
);
input  CLK;
input  RESET;
input [1:0] SENSOR;
input  STOP;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RESET or SENSOR or STOP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module autito_principal_vlg_check_tst (
	En_A,
	En_B,
	IN_DRIVER,
	sampler_rx
);
input  En_A;
input  En_B;
input [3:0] IN_DRIVER;
input sampler_rx;

reg  En_A_expected;
reg  En_B_expected;
reg [3:0] IN_DRIVER_expected;

reg  En_A_prev;
reg  En_B_prev;
reg [3:0] IN_DRIVER_prev;

reg  En_A_expected_prev;
reg  En_B_expected_prev;
reg [3:0] IN_DRIVER_expected_prev;

reg  last_En_A_exp;
reg  last_En_B_exp;
reg [3:0] last_IN_DRIVER_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	En_A_prev = En_A;
	En_B_prev = En_B;
	IN_DRIVER_prev = IN_DRIVER;
end

// update expected /o prevs

always @(trigger)
begin
	En_A_expected_prev = En_A_expected;
	En_B_expected_prev = En_B_expected;
	IN_DRIVER_expected_prev = IN_DRIVER_expected;
end



// expected En_A
initial
begin
	En_A_expected = 1'bX;
	En_A_expected = #999000 1'b0;
end 

// expected En_B
initial
begin
	En_B_expected = 1'bX;
	En_B_expected = #999000 1'b0;
end 
// expected IN_DRIVER[ 3 ]
initial
begin
	IN_DRIVER_expected[3] = 1'bX;
	IN_DRIVER_expected[3] = #390000 1'b0;
	IN_DRIVER_expected[3] = #10000 1'bX;
	IN_DRIVER_expected[3] = #599000 1'b0;
end 
// expected IN_DRIVER[ 2 ]
initial
begin
	IN_DRIVER_expected[2] = 1'bX;
	IN_DRIVER_expected[2] = #390000 1'b0;
	IN_DRIVER_expected[2] = #10000 1'bX;
	IN_DRIVER_expected[2] = #599000 1'b0;
end 
// expected IN_DRIVER[ 1 ]
initial
begin
	IN_DRIVER_expected[1] = 1'bX;
	IN_DRIVER_expected[1] = #390000 1'b0;
	IN_DRIVER_expected[1] = #10000 1'bX;
	IN_DRIVER_expected[1] = #599000 1'b0;
end 
// expected IN_DRIVER[ 0 ]
initial
begin
	IN_DRIVER_expected[0] = 1'bX;
	IN_DRIVER_expected[0] = #390000 1'b0;
	IN_DRIVER_expected[0] = #10000 1'bX;
	IN_DRIVER_expected[0] = #599000 1'b0;
end 
// generate trigger
always @(En_A_expected or En_A or En_B_expected or En_B or IN_DRIVER_expected or IN_DRIVER)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected En_A = %b | expected En_B = %b | expected IN_DRIVER = %b | ",En_A_expected_prev,En_B_expected_prev,IN_DRIVER_expected_prev);
	$display("| real En_A = %b | real En_B = %b | real IN_DRIVER = %b | ",En_A_prev,En_B_prev,IN_DRIVER_prev);
`endif
	if (
		( En_A_expected_prev !== 1'bx ) && ( En_A_prev !== En_A_expected_prev )
		&& ((En_A_expected_prev !== last_En_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port En_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", En_A_expected_prev);
		$display ("     Real value = %b", En_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_En_A_exp = En_A_expected_prev;
	end
	if (
		( En_B_expected_prev !== 1'bx ) && ( En_B_prev !== En_B_expected_prev )
		&& ((En_B_expected_prev !== last_En_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port En_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", En_B_expected_prev);
		$display ("     Real value = %b", En_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_En_B_exp = En_B_expected_prev;
	end
	if (
		( IN_DRIVER_expected_prev[0] !== 1'bx ) && ( IN_DRIVER_prev[0] !== IN_DRIVER_expected_prev[0] )
		&& ((IN_DRIVER_expected_prev[0] !== last_IN_DRIVER_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IN_DRIVER[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IN_DRIVER_expected_prev);
		$display ("     Real value = %b", IN_DRIVER_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IN_DRIVER_exp[0] = IN_DRIVER_expected_prev[0];
	end
	if (
		( IN_DRIVER_expected_prev[1] !== 1'bx ) && ( IN_DRIVER_prev[1] !== IN_DRIVER_expected_prev[1] )
		&& ((IN_DRIVER_expected_prev[1] !== last_IN_DRIVER_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IN_DRIVER[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IN_DRIVER_expected_prev);
		$display ("     Real value = %b", IN_DRIVER_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IN_DRIVER_exp[1] = IN_DRIVER_expected_prev[1];
	end
	if (
		( IN_DRIVER_expected_prev[2] !== 1'bx ) && ( IN_DRIVER_prev[2] !== IN_DRIVER_expected_prev[2] )
		&& ((IN_DRIVER_expected_prev[2] !== last_IN_DRIVER_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IN_DRIVER[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IN_DRIVER_expected_prev);
		$display ("     Real value = %b", IN_DRIVER_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IN_DRIVER_exp[2] = IN_DRIVER_expected_prev[2];
	end
	if (
		( IN_DRIVER_expected_prev[3] !== 1'bx ) && ( IN_DRIVER_prev[3] !== IN_DRIVER_expected_prev[3] )
		&& ((IN_DRIVER_expected_prev[3] !== last_IN_DRIVER_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IN_DRIVER[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IN_DRIVER_expected_prev);
		$display ("     Real value = %b", IN_DRIVER_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IN_DRIVER_exp[3] = IN_DRIVER_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module autito_principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RESET;
reg [1:0] SENSOR;
reg STOP;
// wires                                               
wire En_A;
wire En_B;
wire [3:0] IN_DRIVER;

wire sampler;                             

// assign statements (if any)                          
autito_principal i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.En_A(En_A),
	.En_B(En_B),
	.IN_DRIVER(IN_DRIVER),
	.RESET(RESET),
	.SENSOR(SENSOR),
	.STOP(STOP)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #94720000 1'b0;
	RESET = #3200000 1'b1;
end 
// SENSOR[ 1 ]
initial
begin
	SENSOR[1] = 1'b0;
	SENSOR[1] = #31360000 1'b1;
	SENSOR[1] = #44160000 1'b0;
end 
// SENSOR[ 0 ]
initial
begin
	SENSOR[0] = 1'b0;
	SENSOR[0] = #31360000 1'b1;
	SENSOR[0] = #21760000 1'b0;
	SENSOR[0] = #22400000 1'b1;
	SENSOR[0] = #24320000 1'b0;
end 

// STOP
initial
begin
	STOP = 1'b1;
	STOP = #93440000 1'b0;
end 

autito_principal_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RESET(RESET),
	.SENSOR(SENSOR),
	.STOP(STOP),
	.sampler_tx(sampler)
);

autito_principal_vlg_check_tst tb_out(
	.En_A(En_A),
	.En_B(En_B),
	.IN_DRIVER(IN_DRIVER),
	.sampler_rx(sampler)
);
endmodule

